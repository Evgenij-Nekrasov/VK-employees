{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacter","res","getCharacterByName","getAllComics","getComic","AppBanner","_jsxs","className","children","avengers","avengersLogo","SinglePage","_ref","Component","dataType","useParams","setData","useEffect","updateData","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"iGAAe,UAA0B,kC,OCkB1BA,IAhBMA,IAEfC,cAAA,OACGC,MAAO,CACJC,QAAS,QACTC,MAAO,QACPC,OAAQ,QACRC,UAAW,UACXC,OAAQ,UAEXC,IAAKC,EACLC,IAAI,S,6CCuEEC,IAlFUA,KACtB,MAAM,QAAEC,EAAO,QAAEC,EAAO,MAAEC,EAAK,WAAEC,GCDbC,MACpB,MAAOJ,EAASK,GAAcC,oBAAS,IAChCJ,EAAOK,GAAYD,mBAAS,MAE7BL,EAAUO,uBACbC,eACGC,GAIG,IAHHC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MACTG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACPI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE5BP,GAAW,GAEX,IACG,MAAMY,QAAiBC,MAAMR,EAAK,CAAEC,SAAQI,OAAMC,YAElD,IAAKC,EAASE,GACX,MAAM,IAAIC,MAAM,mBAADC,OACOX,EAAG,cAAAW,OAAaJ,EAASK,SAIlD,MAAMC,QAAaN,EAASO,OAG5B,OADAnB,GAAW,GACJkB,CACV,CAAE,MAAOE,GAGN,MAFApB,GAAW,GACXE,EAASkB,EAAEC,SACLD,CACT,CACH,GACA,IAKH,MAAO,CAAEzB,UAASC,UAASC,QAAOC,WAFfK,uBAAY,IAAMD,EAAS,OAAO,IAEP,EDpCEH,GAE1CuB,EAAW,4CACXC,EAAU,0CAmCVC,EAAuBC,IACnB,CACJC,GAAID,EAAKC,GACTC,KAAMF,EAAKE,KACXC,YAAaH,EAAKG,YAAW,GAAAZ,OACrBS,EAAKG,YAAYC,MAAM,EAAG,KAAI,OACjC,wCACLC,UAAWL,EAAKK,UAAUC,KAAO,IAAMN,EAAKK,UAAUE,UACtDC,SAAUR,EAAKS,KAAK,GAAG7B,IACvB8B,KAAMV,EAAKS,KAAK,GAAG7B,IACnB+B,OAAQX,EAAKW,OAAOC,MAAMR,MAAM,EAAG,MAInCS,EAAoBF,IAAY,IAADG,EAClC,MAAO,CACJb,GAAIU,EAAOV,GACXc,MAAOJ,EAAOI,MACdZ,YAAaQ,EAAOR,aAAe,0BACnCa,UAAWL,EAAOK,UAAS,GAAAzB,OACnBoB,EAAOK,UAAS,OACnB,2CACLX,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DU,UAA+B,QAArBH,EAAAH,EAAOO,YAAY,UAAE,IAAAJ,OAAA,EAArBA,EAAuBG,WAAY,QAE7CE,MAAOR,EAAOS,OAAO,GAAGD,MAAK,GAAA5B,OACrBoB,EAAOS,OAAO,GAAGD,MAAK,KACzB,gBACP,EAGJ,MAAO,CACJjD,UACAE,QACAiD,iBAlEsB1C,iBAAiC,IAA1B2C,EAAMxC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFlB,IAMjB,aAHkBX,EAAQ,GAADoB,OACnBM,EAAQ,8BAAAN,OAA6B+B,EAAM,KAAA/B,OAAIO,KAE1CL,KAAK8B,QAAQC,IAAIzB,EAC/B,EA8DG0B,aA3DkB9C,UAClB,MAAM+C,QAAYvD,EAAQ,GAADoB,OAAIM,EAAQ,eAAAN,OAAcU,EAAE,KAAAV,OAAIO,IACzD,OAAOC,EAAoB2B,EAAIjC,KAAK8B,QAAQ,GAAG,EA0D/CI,mBA3CwBhD,gBACNR,EAAQ,GAADoB,OACnBM,EAAQ,oBAAAN,OAAmBW,EAAI,KAAAX,OAAIO,KAE9BL,KAAK8B,QAAQC,IAAIzB,GAwC5B1B,aACAuD,aAzDkBjD,iBAAiC,IAA1B2C,EAAMxC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAfd,IAmBjB,aAHkBX,EAAQ,GAADoB,OACnBM,EAAQ,8CAAAN,OAA6C+B,EAAM,KAAA/B,OAAIO,KAE1DL,KAAK8B,QAAQC,IAAIX,EAC/B,EAqDGgB,SAnDclD,UACd,MAAM+C,QAAYvD,EAAQ,GAADoB,OAAIM,EAAQ,WAAAN,OAAUU,EAAE,KAAAV,OAAIO,IACrD,OAAOe,EAAiBa,EAAIjC,KAAK8B,QAAQ,GAAG,EAkD9C,C,iEEjFW,MAA0B,qCCA1B,MAA0B,0C,OCiB1BO,IAbGA,IAEVC,eAAA,OAAKC,UAAU,cAAaC,SAAA,CACxB1E,cAAA,OAAKO,IAAKoE,EAAUlE,IAAI,aACxB+D,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,yBACR1E,cAAA,SAAK,iBAG/BA,cAAA,OAAKO,IAAKqE,EAAcnE,IAAI,oB,kCCZxC,+DAoDeoE,UA5CIC,IAA8B,IAA7B,UAAEC,EAAS,SAAEC,GAAUF,EACxC,MAAM,GAAEpC,GAAOuC,eACR/C,EAAMgD,GAAWjE,mBAAS,OAC3B,QAAEN,EAAO,MAAEE,EAAK,WAAEC,EAAU,aAAEoD,EAAY,SAAEI,GAC/C5D,cAEHyE,qBAAU,KACPC,GAAY,GAEZ,CAAC1C,IAEJ,MAAM0C,EAAaA,KAIhB,OAHAtE,IAGQkE,GACL,IAAK,QACFV,EAAS5B,GAAI2C,KAAKC,GAClB,MACH,IAAK,YACFpB,EAAaxB,GAAI2C,KAAKC,GAC5B,EAGGA,EAAiBpD,IACpBgD,EAAQhD,EAAK,EAGVqD,EAAe1E,EAAQb,cAACD,IAAY,IAAM,KAC1CyF,EAAU7E,EAAUX,cAACyF,IAAO,IAAM,KAClCC,EAAY/E,GAAWE,IAAUqB,EAEnC,KADDlC,cAAC+E,EAAS,CAAC7C,KAAMA,IAGpB,OACGsC,eAAAmB,WAAA,CAAAjB,SAAA,CACG1E,cAACuE,IAAS,IACTgB,EACAC,EACAE,IACD,C","file":"static/js/7.0aab4829.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n   return (\n      <img\n         style={{\n            display: \"block\",\n            width: \"250px\",\n            height: \"250px\",\n            objectFit: \"contain\",\n            margin: \"0 auto\",\n         }}\n         src={img}\n         alt=\"Error\"\n      />\n   );\n};\n\nexport default ErrorMessage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n   const { loading, request, error, clearError } = useHttp();\n\n   const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n   const _apiKey = \"apikey=807256966a9f134988a0a71cdf2ddb6d\";\n   const _baseOffset = 210;\n\n   const getAllCharacters = async (offset = _baseOffset) => {\n      const res = await request(\n         `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n      );\n      return res.data.results.map(_transformCharacter);\n   };\n\n   //Почему здесь данные применяются к _transformCharacter, а выше наоборот\n   const getCharacter = async (id) => {\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n      return _transformCharacter(res.data.results[0]);\n   };\n\n   const getAllComics = async (offset = _baseOffset) => {\n      const res = await request(\n         `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n      );\n      return res.data.results.map(_transformComics);\n   };\n\n   const getComic = async (id) => {\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n      return _transformComics(res.data.results[0]);\n   };\n\n   const getCharacterByName = async (name) => {\n      const res = await request(\n         `${_apiBase}characters?name=${name}&${_apiKey}`\n      );\n      return res.data.results.map(_transformCharacter);\n   };\n\n   const _transformCharacter = (char) => {\n      return {\n         id: char.id,\n         name: char.name,\n         description: char.description\n            ? `${char.description.slice(0, 180)}...`\n            : \"There is no data about this character\",\n         thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n         homepage: char.urls[0].url,\n         wiki: char.urls[1].url,\n         comics: char.comics.items.slice(0, 10),\n      };\n   };\n\n   const _transformComics = (comics) => {\n      return {\n         id: comics.id,\n         title: comics.title,\n         description: comics.description || \"There is no description\",\n         pageCount: comics.pageCount\n            ? `${comics.pageCount} p.`\n            : \"No information about the number of pages\",\n         thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n         language: comics.textObjects[0]?.language || \"en-us\",\n         // optional chaining operator\n         price: comics.prices[0].price\n            ? `${comics.prices[0].price}$`\n            : \"not available\",\n      };\n   };\n\n   return {\n      loading,\n      error,\n      getAllCharacters,\n      getCharacter,\n      getCharacterByName,\n      clearError,\n      getAllComics,\n      getComic,\n   };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n   const [loading, setLoading] = useState(false);\n   const [error, setError] = useState(null);\n\n   const request = useCallback(\n      async (\n         url,\n         method = \"GET\",\n         body = null,\n         headers = { \"Content-Type\": \"application/json\" }\n      ) => {\n         setLoading(true);\n\n         try {\n            const response = await fetch(url, { method, body, headers });\n\n            if (!response.ok) {\n               throw new Error(\n                  `Could not fetch ${url}, status: ${response.status}`\n               );\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n         } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n         }\n      },\n      []\n   );\n   //почему здесь используется useCallback\n   const clearError = useCallback(() => setError(null), []);\n\n   return { loading, request, error, clearError };\n};\n","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst SinglePage = ({ Component, dataType }) => {\n   const { id } = useParams();\n   const [data, setData] = useState(null);\n   const { loading, error, clearError, getCharacter, getComic } =\n      useMarvelService();\n\n   useEffect(() => {\n      updateData();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [id]);\n\n   const updateData = () => {\n      clearError();\n\n      // eslint-disable-next-line default-case\n      switch (dataType) {\n         case \"comic\":\n            getComic(id).then(onComicLoaded);\n            break;\n         case \"character\":\n            getCharacter(id).then(onComicLoaded);\n      }\n   };\n\n   const onComicLoaded = (data) => {\n      setData(data);\n   };\n\n   const errorMessage = error ? <ErrorMessage /> : null;\n   const spinner = loading ? <Spinner /> : null;\n   const content = !(loading || error || !data) ? (\n      <Component data={data} />\n   ) : null;\n\n   return (\n      <>\n         <AppBanner />\n         {errorMessage}\n         {spinner}\n         {content}\n      </>\n   );\n};\n\nexport default SinglePage;\n"],"sourceRoot":""}