{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoudary/ErrorBoudary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/CharSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacter","res","getCharacterByName","getAllComics","getComic","ErrorBoudary","Component","constructor","state","componentDidCatch","errorInfo","console","log","this","setState","render","props","children","View","_ref","imgStyle","_jsxs","className","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","Math","floor","random","then","onCharLoaded","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","chars","setChars","setOffset","newItemLoading","setNewItemLoading","charEnded","setCharEnded","onRequest","initial","onCharsLoaded","newChars","ended","arrRefs","useRef","focusOnItem","current","forEach","ref","classList","remove","add","focus","arr","item","i","tabIndex","el","onCharSelected","onKeyDown","key","renderItems","disabled","Skeleton","_Fragment","CharInfo","selectedChar","setSelectedChar","charId","skeleton","CharSearchForm","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","Helmet","TransitionGroup","CSSTransition","in","timeout","classNames","appear","decoration"],"mappings":"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","file":"static/js/4.7d9e5e86.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n   return (\n      <img\n         style={{\n            display: \"block\",\n            width: \"250px\",\n            height: \"250px\",\n            objectFit: \"contain\",\n            margin: \"0 auto\",\n         }}\n         src={img}\n         alt=\"Error\"\n      />\n   );\n};\n\nexport default ErrorMessage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n   const { loading, request, error, clearError } = useHttp();\n\n   const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n   const _apiKey = \"apikey=807256966a9f134988a0a71cdf2ddb6d\";\n   const _baseOffset = 210;\n\n   const getAllCharacters = async (offset = _baseOffset) => {\n      const res = await request(\n         `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n      );\n      return res.data.results.map(_transformCharacter);\n   };\n\n   //Почему здесь данные применяются к _transformCharacter, а выше наоборот\n   const getCharacter = async (id) => {\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n      return _transformCharacter(res.data.results[0]);\n   };\n\n   const getAllComics = async (offset = _baseOffset) => {\n      const res = await request(\n         `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n      );\n      return res.data.results.map(_transformComics);\n   };\n\n   const getComic = async (id) => {\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n      return _transformComics(res.data.results[0]);\n   };\n\n   const getCharacterByName = async (name) => {\n      const res = await request(\n         `${_apiBase}characters?name=${name}&${_apiKey}`\n      );\n      return res.data.results.map(_transformCharacter);\n   };\n\n   const _transformCharacter = (char) => {\n      return {\n         id: char.id,\n         name: char.name,\n         description: char.description\n            ? `${char.description.slice(0, 180)}...`\n            : \"There is no data about this character\",\n         thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n         homepage: char.urls[0].url,\n         wiki: char.urls[1].url,\n         comics: char.comics.items.slice(0, 10),\n      };\n   };\n\n   const _transformComics = (comics) => {\n      return {\n         id: comics.id,\n         title: comics.title,\n         description: comics.description || \"There is no description\",\n         pageCount: comics.pageCount\n            ? `${comics.pageCount} p.`\n            : \"No information about the number of pages\",\n         thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n         language: comics.textObjects[0]?.language || \"en-us\",\n         // optional chaining operator\n         price: comics.prices[0].price\n            ? `${comics.prices[0].price}$`\n            : \"not available\",\n      };\n   };\n\n   return {\n      loading,\n      error,\n      getAllCharacters,\n      getCharacter,\n      getCharacterByName,\n      clearError,\n      getAllComics,\n      getComic,\n   };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n   const [loading, setLoading] = useState(false);\n   const [error, setError] = useState(null);\n\n   const request = useCallback(\n      async (\n         url,\n         method = \"GET\",\n         body = null,\n         headers = { \"Content-Type\": \"application/json\" }\n      ) => {\n         setLoading(true);\n\n         try {\n            const response = await fetch(url, { method, body, headers });\n\n            if (!response.ok) {\n               throw new Error(\n                  `Could not fetch ${url}, status: ${response.status}`\n               );\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n         } catch (e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n         }\n      },\n      []\n   );\n   //почему здесь используется useCallback\n   const clearError = useCallback(() => setError(null), []);\n\n   return { loading, request, error, clearError };\n};\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoudary extends Component {\n   state = {\n      error: false,\n   };\n\n   componentDidCatch(error, errorInfo) {\n      console.log(error, errorInfo);\n      this.setState({\n         error: true,\n      });\n   }\n\n   render() {\n      if (this.state.error) {\n         return <ErrorMessage />;\n      }\n\n      return this.props.children;\n   }\n}\n\nexport default ErrorBoudary;\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n   const [char, setChar] = useState(null);\n   const { loading, error, getCharacter, clearError } = useMarvelService();\n   //Зачем здесь setInterval\n   useEffect(() => {\n      updateChar();\n      const timerId = setInterval(updateChar, 6000000);\n\n      return () => {\n         clearInterval(timerId);\n      };\n   }, []);\n\n   const updateChar = () => {\n      clearError();\n      const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n      getCharacter(id).then(onCharLoaded);\n   };\n\n   const onCharLoaded = (char) => {\n      setChar(char);\n   };\n\n   const errorMessage = error ? <ErrorMessage /> : null;\n   const spinner = loading ? <Spinner /> : null;\n   const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n   return (\n      <div className=\"randomchar\">\n         {errorMessage}\n         {spinner}\n         {content}\n         <div className=\"randomchar__static\">\n            <p className=\"randomchar__title\">\n               Random character for today!\n               <br />\n               Do you want to get to know him better?\n            </p>\n            <p className=\"randomchar__title\">Or choose another one</p>\n            <button onClick={updateChar} className=\"button button__main\">\n               <div className=\"inner\">try it</div>\n            </button>\n            <img\n               src={mjolnir}\n               alt=\"mjolnir\"\n               className=\"randomchar__decoration\"\n            />\n         </div>\n      </div>\n   );\n};\n\nconst View = ({ char }) => {\n   const { name, description, thumbnail, homepage, wiki } = char;\n   let imgStyle = { objectFit: \"cover\" };\n   if (\n      thumbnail ===\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n   ) {\n      imgStyle = { objectFit: \"contain\" };\n   }\n\n   return (\n      <div className=\"randomchar__block\">\n         <img\n            src={thumbnail}\n            alt=\"Random character\"\n            className=\"randomchar__img\"\n            style={imgStyle}\n         />\n         <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">{description}</p>\n            <div className=\"randomchar__btns\">\n               <a href={homepage} className=\"button button__main\">\n                  <div className=\"inner\">homepage</div>\n               </a>\n               <a href={wiki} className=\"button button__secondary\">\n                  <div className=\"inner\">Wiki</div>\n               </a>\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n   const [chars, setChars] = useState([]);\n   const [offset, setOffset] = useState(210);\n   const [newItemLoading, setNewItemLoading] = useState(false);\n   const [charEnded, setCharEnded] = useState(false);\n\n   const { loading, error, getAllCharacters } = useMarvelService();\n\n   //Почему возникает бесконечный цикл без пустого массива\n   useEffect(() => {\n      onRequest(offset, true);\n   }, []);\n   //как это работает и зачем вообще нужна эта конструкция?Без неё все норм\n   const onRequest = (offset, initial) => {\n      initial ? setNewItemLoading(false) : setNewItemLoading(true);\n      getAllCharacters(offset).then(onCharsLoaded);\n   };\n\n   const onCharsLoaded = (newChars) => {\n      let ended = false;\n      if (newChars.length < 9) {\n         ended = true;\n      }\n      //Как соблюдается последовательсность вызовов за счет колбэк функции ниже?\n      setChars((chars) => [...chars, ...newChars]);\n      setNewItemLoading((newItemLoading) => false);\n      setOffset((offset) => offset + 9);\n      setCharEnded((charEnded) => ended);\n   };\n\n   const arrRefs = useRef([]);\n\n   //Зачем сначала удаляем все char__item_selected\n   //Зачем current?\n   const focusOnItem = (id) => {\n      arrRefs.current.forEach((ref) =>\n         ref.classList.remove(\"char__item_selected\")\n      );\n      arrRefs.current[id].classList.add(\"char__item_selected\");\n      arrRefs.current[id].focus();\n   };\n\n   const items = renderItems(chars);\n\n   function renderItems(arr) {\n      const items = arr.map((item, i) => {\n         let imgStyle = { objectFit: \"cover\" };\n         if (\n            item.thumbnail ===\n            \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n         ) {\n            imgStyle = { objectFit: \"unset\" };\n         }\n\n         return (\n            <li\n               className=\"char__item\"\n               tabIndex={0}\n               ref={(el) => (arrRefs.current[i] = el)}\n               key={item.id}\n               onClick={() => {\n                  props.onCharSelected(item.id);\n                  focusOnItem(i);\n               }}\n               onKeyDown={(e) => {\n                  if (e.key === \"Enter\") {\n                     props.onCharSelected(item.id);\n                     focusOnItem(i);\n                  }\n               }}\n            >\n               <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n               <div className=\"char__name\">{item.name}</div>\n            </li>\n         );\n      });\n      return <ul className=\"char__grid\">{items}</ul>;\n   }\n\n   const errorMessage = error ? <ErrorMessage /> : null;\n   const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n   return (\n      <div className=\"char__list\">\n         {errorMessage}\n         {spinner}\n         {items}\n         <button\n            className=\"button button__main button__long\"\n            disabled={newItemLoading}\n            style={{ display: charEnded ? \"none\" : \"block\" }}\n            onClick={() => onRequest(offset)}\n         >\n            <div className=\"inner\">load more</div>\n         </button>\n      </div>\n   );\n};\n\nCharList.propTypes = {\n   onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n   return (\n      <>\n         <p className=\"char__select\">\n            Please select a character to see information\n         </p>\n         <div className=\"skeleton\">\n            <div className=\"pulse skeleton__header\">\n               <div className=\"pulse skeleton__circle\"></div>\n               <div className=\"pulse skeleton__mini\"></div>\n            </div>\n            <div className=\"pulse skeleton__block\"></div>\n            <div className=\"pulse skeleton__block\"></div>\n            <div className=\"pulse skeleton__block\"></div>\n         </div>\n      </>\n   );\n};\n\nexport default Skeleton;\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n   const [selectedChar, setSelectedChar] = useState(null);\n\n   const { error, loading, getCharacter, clearError } = useMarvelService();\n\n   useEffect(() => {\n      updateChar();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [props.charId]);\n\n   const updateChar = () => {\n      const { charId } = props;\n      if (!charId) {\n         return;\n      }\n\n      clearError();\n      getCharacter(charId).then(onCharLoaded);\n   };\n\n   const onCharLoaded = (selectedChar) => {\n      setSelectedChar(selectedChar);\n   };\n\n   const skeleton = loading || error || selectedChar ? null : <Skeleton />;\n   const errorMessage = error ? <ErrorMessage /> : null;\n   const spinner = loading ? <Spinner /> : null;\n   const content = !(loading || error || !selectedChar) ? (\n      <View char={selectedChar} />\n   ) : null;\n\n   return (\n      <div className=\"char__info\">\n         {skeleton}\n         {errorMessage}\n         {spinner}\n         {content}\n      </div>\n   );\n};\n\nconst View = ({ char }) => {\n   const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n   let imgStyle = { objectFit: \"cover\" };\n   if (\n      thumbnail ===\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n   ) {\n      imgStyle = { objectFit: \"contain\" };\n   }\n\n   return (\n      <>\n         <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyle} />\n            <div>\n               <div className=\"char__info-name\">{name}</div>\n               <div className=\"char__btns\">\n                  <a href={homepage} className=\"button button__main\">\n                     <div className=\"inner\">homepage</div>\n                  </a>\n                  <a href={wiki} className=\"button button__secondary\">\n                     <div className=\"inner\">Wiki</div>\n                  </a>\n               </div>\n            </div>\n         </div>\n         <div className=\"char__descr\">{description}</div>\n         <div className=\"char__comics\">Comics:</div>\n         <ul className=\"char__comics-list\">\n            {comics.length < 10\n               ? \"There are no comics for this character\"\n               : null}\n\n            {comics.map((item, i) => (\n               <li key={i} className=\"char__comics-item\">\n                  {item.name}\n               </li>\n            ))}\n         </ul>\n      </>\n   );\n};\n\nCharInfo.propTypes = {\n   charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from \"react\";\nimport {\n   Formik,\n   Form,\n   Field,\n   ErrorMessage as FormikErrorMessage,\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charSearchForm.scss\";\n\nconst CharSearchForm = () => {\n   const [char, setChar] = useState(null);\n   const { loading, error, getCharacterByName, clearError } =\n      useMarvelService();\n\n   const onCharLoaded = (char) => {\n      setChar(char);\n   };\n\n   const updateChar = (name) => {\n      clearError();\n\n      getCharacterByName(name).then(onCharLoaded);\n   };\n\n   const errorMessage = error ? (\n      <div className=\"char__search-critical-error\">\n         <ErrorMessage />\n      </div>\n   ) : null;\n\n   const results = !char ? null : char.length > 0 ? (\n      <div className=\"char__search-wrapper\">\n         <div className=\"char__search-success\">\n            There is! Visit {char[0].name} page?\n         </div>\n         <Link\n            to={`/characters/${char[0].id}`}\n            className=\"button button__secondary\"\n         >\n            <div className=\"inner\">To page</div>\n         </Link>\n      </div>\n   ) : (\n      <div className=\"char__search-error\">\n         The character was not found. Check the name and try again\n      </div>\n   );\n\n   return (\n      <div className=\"char__search-form\">\n         <Formik\n            initialValues={{\n               charName: \"\",\n            }}\n            validationSchema={Yup.object({\n               charName: Yup.string().required(\"This field is required\"),\n            })}\n            onSubmit={({ charName }) => {\n               updateChar(charName);\n            }}\n         >\n            <Form>\n               <label className=\"char__search-label\" htmlFor=\"charName\">\n                  Or find a character by name:\n               </label>\n               <div className=\"char__search-wrapper\">\n                  <Field\n                     id=\"charName\"\n                     name=\"charName\"\n                     type=\"text\"\n                     placeholder=\"Enter name\"\n                  />\n                  <button\n                     type=\"submit\"\n                     className=\"button button__main\"\n                     disabled={loading}\n                  >\n                     <div className=\"inner\">find</div>\n                  </button>\n               </div>\n               <FormikErrorMessage\n                  component=\"div\"\n                  className=\"char__search-error\"\n                  name=\"charName\"\n               />\n            </Form>\n         </Formik>\n         {results}\n         {errorMessage}\n      </div>\n   );\n};\n\nexport default CharSearchForm;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoudary from \"../errorBoudary/ErrorBoudary\";\nimport CharSearchForm from \"../CharSearchForm/CharSearchForm\";\n\nimport decoration from \"../../resources/img/vision.png\";\nimport \"./mainPage.scss\";\n\nconst MainPage = () => {\n   const [selectedChar, setChar] = useState(null);\n\n   const onCharSelected = (id) => {\n      setChar(id);\n   };\n\n   return (\n      <>\n         <Helmet>\n            <meta name=\"description\" content=\"Marvel information portal\" />\n            <title>Marvel information portal</title>\n         </Helmet>\n         <TransitionGroup>\n            <CSSTransition\n               in={true}\n               timeout={2000}\n               classNames=\"fade\"\n               appear={true}\n            >\n               <ErrorBoudary>\n                  <RandomChar />\n               </ErrorBoudary>\n            </CSSTransition>\n\n            <div className=\"char__content\">\n               <CSSTransition\n                  in={true}\n                  timeout={2000}\n                  classNames=\"fade\"\n                  appear={true}\n               >\n                  <ErrorBoudary>\n                     <CharList onCharSelected={onCharSelected} />\n                  </ErrorBoudary>\n               </CSSTransition>\n               <div>\n                  <ErrorBoudary>\n                     <CharInfo charId={selectedChar} />\n                  </ErrorBoudary>\n                  <ErrorBoudary>\n                     <CharSearchForm />\n                  </ErrorBoudary>\n               </div>\n            </div>\n         </TransitionGroup>\n         <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n      </>\n   );\n};\n\nexport default MainPage;\n"],"sourceRoot":""}